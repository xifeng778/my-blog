(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{400:function(t,a,e){"use strict";e.r(a);var s=e(54),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" Vuex")]),t._v(" "),e("blockquote",[e("p",[t._v("回顾一下组件数据共享的方式：")]),t._v(" "),e("p",[t._v("组件数据共享方式  （适用于不复杂的，小范围的）")]),t._v(" "),e("p",[t._v("1、父子节点传值  v-bind属性绑定")]),t._v(" "),e("p",[t._v("2、子父节点传值 v-on 事件绑定")]),t._v(" "),e("p",[t._v("3、兄弟节点  EventBus")])]),t._v(" "),e("h2",{attrs:{id:"_1、概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、概述"}},[t._v("#")]),t._v(" 1、概述")]),t._v(" "),e("blockquote",[e("p",[t._v("vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间数据的共享。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("适用vuex统一管理状态的好处：\n\n能够在vuex中集中管理共享的数据，易于开发和后期维护\n能够高效的实现组件之间的数据共享，提高开发效率\n存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("什么样的数据适合存储到vuex中\n\n一般情况下，只有组件之间共享的数据，才有必要存储到vuex中；对于组件中的私有数据，依旧存储在组件自身的data中即可。\n")])])]),e("h2",{attrs:{id:"_2、基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、基本使用"}},[t._v("#")]),t._v(" 2、基本使用")]),t._v(" "),e("p",[t._v("1、安装vuex依赖包")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm install vuex --save\n")])])]),e("p",[t._v("2、导入vuex包（main.js中）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import vuex from 'vuex'\nVue.use('vuex')\n")])])]),e("p",[t._v("3、创建store对象（store目录下的index.js中）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const store = new Vuex.Store({\n\t//state 中存放的就是全局共享的数据\n\tstate:{count:0}\n})\n")])])]),e("p",[t._v("4、将store对象挂载到vue实例中（main.js中）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("new Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount('#app')\n")])])]),e("h2",{attrs:{id:"_3、核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、核心概念"}},[t._v("#")]),t._v(" 3、核心概念")]),t._v(" "),e("h3",{attrs:{id:"_1、state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、state"}},[t._v("#")]),t._v(" 1、state")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("state提供唯一的公共数据源，所有共享的数据都要统一放到store的state中进行存储。\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const store = new Vuex.Store({\n\t//state 中存放的就是全局共享的数据\n\tstate:{count:0}\n})\n")])])]),e("p",[t._v("访问state中数据的第一种方式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("this.$store.state.全局数据名称\n")])])]),e("p",[t._v("第二种方式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("从vuex中按需导入，mapState函数\nimport {mapState} from 'vuex'\n")])])]),e("p",[t._v("通过刚才导入的mapState函数，将当前组件需要的全局数据，映射为当前组件的computed计算属性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("computed:{\n...mapState(['全局数据名称'])\n}\n")])])]),e("h3",{attrs:{id:"_2、mutation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、mutation"}},[t._v("#")]),t._v(" 2、mutation")]),t._v(" "),e("p",[t._v("mutation用于变更store中的数据")]),t._v(" "),e("p",[t._v("1、只能通过mutation变更store数据，不可以直接操作store中的数据")]),t._v(" "),e("p",[t._v("2、通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有数据的变化")]),t._v(" "),e("p",[t._v("3、不能在mutation中执行异步操作，需要使用action中定义")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export default new Vuex.Store({\n  state: {\n    count:5\n  },\n  mutations: {\n  add(state,参数){\n  //变更状态\n  state.count++\n  }\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n")])])]),e("p",[t._v("触发一")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("this.$store.commit('add',参数)\n")])])]),e("p",[t._v("第二种方式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("从vuex中按需导入，mapMutations函数\nimport {mapMutations} from 'vuex'\n")])])]),e("p",[t._v("通过刚才导入的mapMutations函数，将当前组件需要的mapMutation函数，映射为当前组件的methods函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("methods:{\n...mapMutations(['mapMutations函数一','mapMutations函数二'])\n}\n")])])]),e("h3",{attrs:{id:"_3、action"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、action"}},[t._v("#")]),t._v(" 3、action")]),t._v(" "),e("p",[t._v("Action用于处理异步任务")]),t._v(" "),e("p",[t._v("如果通过异步操作变更数据，必须通过action，而不能直接使用mutation，但是在action中还是要通过触发mutation的方式间接变更数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export default new Vuex.Store({\n  state: {\n    count:5\n  },\n  mutations: {\n    add(state){\n      state.count++\n    }\n  },\n  actions: {\n  //不能直接修改state值的数据，要使用mutation \n  \taddAsync(context){\n  \t\tsetTimeout(()=>{\n  \t\tcontext.commit('add')\n  \t\t},1000)\n  \t}\n  },\n  modules: {\n  }\n})\n")])])]),e("p",[t._v("触发action一")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("this.$store.dispatch('addAsync')\n")])])]),e("p",[t._v("触发方式二")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("从vuex中按需导入，mapMutations函数\nimport {mapMutations} from 'vuex'\n")])])]),e("p",[t._v("通过刚才导入的mapctions函数，将当前组件需要的mapctions函数，映射为当前组件的methods函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("methods:{\n...mapctions(['mapctions函数一','mapctions函数二'])\n}\n")])])]),e("h3",{attrs:{id:"_4、getter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、getter"}},[t._v("#")]),t._v(" 4、getter")]),t._v(" "),e("p",[t._v("用于对store中的数据进行加工处理形成新的数据")]),t._v(" "),e("p",[t._v("1、getter可以对store中已有的数据加工处理之后形成新的数据，类似于vue计算属性")]),t._v(" "),e("p",[t._v("2、store中数据发生变化，getter的数据也会跟着变化（不会修改原来的数据）")]),t._v(" "),e("p",[t._v("触发action一")]),t._v(" "),e("div",{staticClass:"language-vue extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vue"}},[e("code",[t._v("this.$store.getters.名称\n")])])]),e("p",[t._v("触发方式二")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("从vuex中按需导入，mapSetters函数\nimport {mapSetters} from 'vuex'\n")])])]),e("p",[t._v("通过刚才导入的mapSetters，将当前组件需要的mapSetters，映射为当前组件的计算属性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" computed:{\n        ...mapState(['count']),\n        ...mapGetters(['showcount'])\n    },\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);